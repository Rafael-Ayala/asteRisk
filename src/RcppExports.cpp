// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// serialOceanTidesCorrections
List serialOceanTidesCorrections(StringVector rowTideNames, NumericMatrix tideCnmSnmCoefficients, NumericVector doodsonVars, NumericMatrix Cnm, NumericMatrix Snm, double m1, double m2);
RcppExport SEXP _asteRisk_serialOceanTidesCorrections(SEXP rowTideNamesSEXP, SEXP tideCnmSnmCoefficientsSEXP, SEXP doodsonVarsSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type rowTideNames(rowTideNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tideCnmSnmCoefficients(tideCnmSnmCoefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doodsonVars(doodsonVarsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< double >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(serialOceanTidesCorrections(rowTideNames, tideCnmSnmCoefficients, doodsonVars, Cnm, Snm, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// parallelOceanTidesCorrections
List parallelOceanTidesCorrections(NumericVector rowTideNames, NumericMatrix tideCnmSnmCoefficients, NumericVector doodsonVars, NumericMatrix Cnm, NumericMatrix Snm, double m1, double m2);
RcppExport SEXP _asteRisk_parallelOceanTidesCorrections(SEXP rowTideNamesSEXP, SEXP tideCnmSnmCoefficientsSEXP, SEXP doodsonVarsSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rowTideNames(rowTideNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tideCnmSnmCoefficients(tideCnmSnmCoefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doodsonVars(doodsonVarsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< double >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(parallelOceanTidesCorrections(rowTideNames, tideCnmSnmCoefficients, doodsonVars, Cnm, Snm, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// legendre
List legendre(int n, int m, double angle);
RcppExport SEXP _asteRisk_legendre(SEXP nSEXP, SEXP mSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(legendre(n, m, angle));
    return rcpp_result_gen;
END_RCPP
}
// gravityGradientSphericalCoords
NumericVector gravityGradientSphericalCoords(const NumericMatrix Pnm, const NumericMatrix dPnm, const NumericMatrix Cnm, const NumericMatrix Snm, const double lat, const double lon, const double d, const double R, const double GM, const int n, const int m);
RcppExport SEXP _asteRisk_gravityGradientSphericalCoords(SEXP PnmSEXP, SEXP dPnmSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP dSEXP, SEXP RSEXP, SEXP GMSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type Pnm(PnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type dPnm(dPnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< const double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type GM(GMSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(gravityGradientSphericalCoords(Pnm, dPnm, Cnm, Snm, lat, lon, d, R, GM, n, m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_asteRisk_serialOceanTidesCorrections", (DL_FUNC) &_asteRisk_serialOceanTidesCorrections, 7},
    {"_asteRisk_parallelOceanTidesCorrections", (DL_FUNC) &_asteRisk_parallelOceanTidesCorrections, 7},
    {"_asteRisk_legendre", (DL_FUNC) &_asteRisk_legendre, 3},
    {"_asteRisk_gravityGradientSphericalCoords", (DL_FUNC) &_asteRisk_gravityGradientSphericalCoords, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_asteRisk(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
