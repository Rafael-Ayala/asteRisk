// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// angularSeparation
double angularSeparation(NumericVector x, NumericVector y);
RcppExport SEXP _asteRisk_angularSeparation(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(angularSeparation(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rotate3DVectorsAngleAxis
NumericMatrix rotate3DVectorsAngleAxis(NumericMatrix x, NumericVector axis, double angle);
RcppExport SEXP _asteRisk_rotate3DVectorsAngleAxis(SEXP xSEXP, SEXP axisSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate3DVectorsAngleAxis(x, axis, angle));
    return rcpp_result_gen;
END_RCPP
}
// rotate3DVectorAngleAxis
NumericVector rotate3DVectorAngleAxis(NumericVector x, NumericVector axis, double angle);
RcppExport SEXP _asteRisk_rotate3DVectorAngleAxis(SEXP xSEXP, SEXP axisSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate3DVectorAngleAxis(x, axis, angle));
    return rcpp_result_gen;
END_RCPP
}
// dvhat
NumericVector dvhat(NumericVector position, NumericVector velocity);
RcppExport SEXP _asteRisk_dvhat(SEXP positionSEXP, SEXP velocitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type velocity(velocitySEXP);
    rcpp_result_gen = Rcpp::wrap(dvhat(position, velocity));
    return rcpp_result_gen;
END_RCPP
}
// vectorCrossProduct3D_cpp
NumericVector vectorCrossProduct3D_cpp(NumericVector u, NumericVector v);
RcppExport SEXP _asteRisk_vectorCrossProduct3D_cpp(SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorCrossProduct3D_cpp(u, v));
    return rcpp_result_gen;
END_RCPP
}
// serialOceanTidesCorrections
List serialOceanTidesCorrections(StringVector rowTideNames, NumericMatrix tideCnmSnmCoefficients, NumericVector doodsonVars, NumericMatrix Cnm, NumericMatrix Snm, double m1, double m2);
RcppExport SEXP _asteRisk_serialOceanTidesCorrections(SEXP rowTideNamesSEXP, SEXP tideCnmSnmCoefficientsSEXP, SEXP doodsonVarsSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type rowTideNames(rowTideNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tideCnmSnmCoefficients(tideCnmSnmCoefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doodsonVars(doodsonVarsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< double >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(serialOceanTidesCorrections(rowTideNames, tideCnmSnmCoefficients, doodsonVars, Cnm, Snm, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// parallelOceanTidesCorrections
List parallelOceanTidesCorrections(NumericVector rowTideNames, NumericMatrix tideCnmSnmCoefficients, NumericVector doodsonVars, NumericMatrix Cnm, NumericMatrix Snm, double m1, double m2);
RcppExport SEXP _asteRisk_parallelOceanTidesCorrections(SEXP rowTideNamesSEXP, SEXP tideCnmSnmCoefficientsSEXP, SEXP doodsonVarsSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rowTideNames(rowTideNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tideCnmSnmCoefficients(tideCnmSnmCoefficientsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type doodsonVars(doodsonVarsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< double >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(parallelOceanTidesCorrections(rowTideNames, tideCnmSnmCoefficients, doodsonVars, Cnm, Snm, m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// legendre
List legendre(int n, int m, double angle);
RcppExport SEXP _asteRisk_legendre(SEXP nSEXP, SEXP mSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(legendre(n, m, angle));
    return rcpp_result_gen;
END_RCPP
}
// SPICE_i_dnnt_vec
IntegerVector SPICE_i_dnnt_vec(NumericVector x);
RcppExport SEXP _asteRisk_SPICE_i_dnnt_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SPICE_i_dnnt_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// SPICE_i_dnnt
int SPICE_i_dnnt(double x);
RcppExport SEXP _asteRisk_SPICE_i_dnnt(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SPICE_i_dnnt(x));
    return rcpp_result_gen;
END_RCPP
}
// keplerVectorSolver
double keplerVectorSolver(double evec1, double evec2);
RcppExport SEXP _asteRisk_keplerVectorSolver(SEXP evec1SEXP, SEXP evec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type evec1(evec1SEXP);
    Rcpp::traits::input_parameter< double >::type evec2(evec2SEXP);
    rcpp_result_gen = Rcpp::wrap(keplerVectorSolver(evec1, evec2));
    return rcpp_result_gen;
END_RCPP
}
// gravityGradientSphericalCoords
NumericVector gravityGradientSphericalCoords(const NumericMatrix Pnm, const NumericMatrix dPnm, const NumericMatrix Cnm, const NumericMatrix Snm, const double lat, const double lon, const double d, const double R, const double GM, const int n, const int m);
RcppExport SEXP _asteRisk_gravityGradientSphericalCoords(SEXP PnmSEXP, SEXP dPnmSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP dSEXP, SEXP RSEXP, SEXP GMSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type Pnm(PnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type dPnm(dPnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< const double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type GM(GMSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(gravityGradientSphericalCoords(Pnm, dPnm, Cnm, Snm, lat, lon, d, R, GM, n, m));
    return rcpp_result_gen;
END_RCPP
}
// gravityGradientSphericalCoords_2
NumericVector gravityGradientSphericalCoords_2(const NumericMatrix Pnm, const NumericMatrix dPnm, const NumericMatrix Cnm, const NumericMatrix Snm, const double lat, const double lon, const double d, const double R, const double GM, const int n, const int m);
RcppExport SEXP _asteRisk_gravityGradientSphericalCoords_2(SEXP PnmSEXP, SEXP dPnmSEXP, SEXP CnmSEXP, SEXP SnmSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP dSEXP, SEXP RSEXP, SEXP GMSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type Pnm(PnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type dPnm(dPnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Cnm(CnmSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Snm(SnmSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< const double >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type GM(GMSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(gravityGradientSphericalCoords_2(Pnm, dPnm, Cnm, Snm, lat, lon, d, R, GM, n, m));
    return rcpp_result_gen;
END_RCPP
}
// clenshawAllDerivatives_OLD
NumericVector clenshawAllDerivatives_OLD(double t, int N, double Ta, double Tb, NumericVector Coeffs, int derivativesOrder);
RcppExport SEXP _asteRisk_clenshawAllDerivatives_OLD(SEXP tSEXP, SEXP NSEXP, SEXP TaSEXP, SEXP TbSEXP, SEXP CoeffsSEXP, SEXP derivativesOrderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type Ta(TaSEXP);
    Rcpp::traits::input_parameter< double >::type Tb(TbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type derivativesOrder(derivativesOrderSEXP);
    rcpp_result_gen = Rcpp::wrap(clenshawAllDerivatives_OLD(t, N, Ta, Tb, Coeffs, derivativesOrder));
    return rcpp_result_gen;
END_RCPP
}
// clenshawAllDerivatives_NoIntegral
NumericVector clenshawAllDerivatives_NoIntegral(double t, int N, double XS1, double XS2, NumericVector Coeffs, int derivativesOrder, double xScaleUnitFactor);
RcppExport SEXP _asteRisk_clenshawAllDerivatives_NoIntegral(SEXP tSEXP, SEXP NSEXP, SEXP XS1SEXP, SEXP XS2SEXP, SEXP CoeffsSEXP, SEXP derivativesOrderSEXP, SEXP xScaleUnitFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type XS1(XS1SEXP);
    Rcpp::traits::input_parameter< double >::type XS2(XS2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type derivativesOrder(derivativesOrderSEXP);
    Rcpp::traits::input_parameter< double >::type xScaleUnitFactor(xScaleUnitFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(clenshawAllDerivatives_NoIntegral(t, N, XS1, XS2, Coeffs, derivativesOrder, xScaleUnitFactor));
    return rcpp_result_gen;
END_RCPP
}
// clenshawAllDerivatives
NumericVector clenshawAllDerivatives(double t, int N, double XS1, double XS2, NumericVector Coeffs, int derivativesOrder, double xScaleUnitFactor, const bool integral);
RcppExport SEXP _asteRisk_clenshawAllDerivatives(SEXP tSEXP, SEXP NSEXP, SEXP XS1SEXP, SEXP XS2SEXP, SEXP CoeffsSEXP, SEXP derivativesOrderSEXP, SEXP xScaleUnitFactorSEXP, SEXP integralSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type XS1(XS1SEXP);
    Rcpp::traits::input_parameter< double >::type XS2(XS2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Coeffs(CoeffsSEXP);
    Rcpp::traits::input_parameter< int >::type derivativesOrder(derivativesOrderSEXP);
    Rcpp::traits::input_parameter< double >::type xScaleUnitFactor(xScaleUnitFactorSEXP);
    Rcpp::traits::input_parameter< const bool >::type integral(integralSEXP);
    rcpp_result_gen = Rcpp::wrap(clenshawAllDerivatives(t, N, XS1, XS2, Coeffs, derivativesOrder, xScaleUnitFactor, integral));
    return rcpp_result_gen;
END_RCPP
}
// iauDtdb
double iauDtdb(double MJDTT);
RcppExport SEXP _asteRisk_iauDtdb(SEXP MJDTTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type MJDTT(MJDTTSEXP);
    rcpp_result_gen = Rcpp::wrap(iauDtdb(MJDTT));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_asteRisk_angularSeparation", (DL_FUNC) &_asteRisk_angularSeparation, 2},
    {"_asteRisk_rotate3DVectorsAngleAxis", (DL_FUNC) &_asteRisk_rotate3DVectorsAngleAxis, 3},
    {"_asteRisk_rotate3DVectorAngleAxis", (DL_FUNC) &_asteRisk_rotate3DVectorAngleAxis, 3},
    {"_asteRisk_dvhat", (DL_FUNC) &_asteRisk_dvhat, 2},
    {"_asteRisk_vectorCrossProduct3D_cpp", (DL_FUNC) &_asteRisk_vectorCrossProduct3D_cpp, 2},
    {"_asteRisk_serialOceanTidesCorrections", (DL_FUNC) &_asteRisk_serialOceanTidesCorrections, 7},
    {"_asteRisk_parallelOceanTidesCorrections", (DL_FUNC) &_asteRisk_parallelOceanTidesCorrections, 7},
    {"_asteRisk_legendre", (DL_FUNC) &_asteRisk_legendre, 3},
    {"_asteRisk_SPICE_i_dnnt_vec", (DL_FUNC) &_asteRisk_SPICE_i_dnnt_vec, 1},
    {"_asteRisk_SPICE_i_dnnt", (DL_FUNC) &_asteRisk_SPICE_i_dnnt, 1},
    {"_asteRisk_keplerVectorSolver", (DL_FUNC) &_asteRisk_keplerVectorSolver, 2},
    {"_asteRisk_gravityGradientSphericalCoords", (DL_FUNC) &_asteRisk_gravityGradientSphericalCoords, 11},
    {"_asteRisk_gravityGradientSphericalCoords_2", (DL_FUNC) &_asteRisk_gravityGradientSphericalCoords_2, 11},
    {"_asteRisk_clenshawAllDerivatives_OLD", (DL_FUNC) &_asteRisk_clenshawAllDerivatives_OLD, 6},
    {"_asteRisk_clenshawAllDerivatives_NoIntegral", (DL_FUNC) &_asteRisk_clenshawAllDerivatives_NoIntegral, 7},
    {"_asteRisk_clenshawAllDerivatives", (DL_FUNC) &_asteRisk_clenshawAllDerivatives, 8},
    {"_asteRisk_iauDtdb", (DL_FUNC) &_asteRisk_iauDtdb, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_asteRisk(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
